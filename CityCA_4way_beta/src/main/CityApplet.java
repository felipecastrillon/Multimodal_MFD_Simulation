//**********************************************************
// Ring Network Simulatior 
//
// Author: Felipe Castrillon & Jorge Laval
//
// City Applet contains all Java applet documentation and 
// runnable commands
// 
//*********************************************************

package main;

import ca.mySB;
import java.awt.Color;
import java.text.DecimalFormat;

public class CityApplet extends javax.swing.JApplet implements Runnable {
   
    public static int updateInterval = 100;
    private Thread thread=null;
    private boolean running = false;
    private Network net;
    public static int t, blocks=5, length=24, lanes = 1, nruns =20; //sim time
    public static double tunit = 1, distunit=1,jamdens=1,maxflow=0.8;
    public static int mfddt=60;
    private int timecnt=0;
    private boolean firsttime = true;
    private double qEW,kEW, qNS, kNS;
    private boolean loadnet = false;
    public boolean chkCarColor = true;
    public boolean reverseflows = false;
    public static int colind = 0;
    public int inflcount = 0;
    public static KShortestDistances ksd = new KShortestDistances();

    /** Initializes the applet canvas */
    public void init() {
        initComponents();
        initi();
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mySB11 = new ca.mySB();
        inflowButtonGroup = new javax.swing.ButtonGroup();
        networkButtonGroup = new javax.swing.ButtonGroup();
        mov = new main.Movie();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        sbCycle = new ca.mySB();
        sbOffset0 = new ca.mySB();
        sbGoC = new ca.mySB();
        sbOffset1 = new ca.mySB();
        sbCOV = new ca.mySB();
        checkbox1 = new java.awt.Checkbox();
        jPanel3 = new javax.swing.JPanel();
        sbSimSpeed = new ca.mySB();
        chkMovie = new javax.swing.JCheckBox();
        sbDtMFD = new ca.mySB();
        tbPause = new javax.swing.JToggleButton();
        sbNumRuns = new ca.mySB();
        jPanel8 = new javax.swing.JPanel();
        chkOut = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOut = new javax.swing.JTextArea();
        Buses = new javax.swing.JPanel();
        BUSstopt = new ca.mySB();
        BUSprobst = new ca.mySB();
        BUSspeed = new ca.mySB();
        BusProp = new ca.mySB();
        caSimulation = new javax.swing.JButton();
        Restart = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));

        mov.setBackground(new java.awt.Color(51, 51, 51));
        mov.setPreferredSize(new java.awt.Dimension(637, 637));
        mov.setxLabel("<Not Set>");

        javax.swing.GroupLayout movLayout = new javax.swing.GroupLayout(mov);
        mov.setLayout(movLayout);
        movLayout.setHorizontalGroup(
            movLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1296, Short.MAX_VALUE)
        );
        movLayout.setVerticalGroup(
            movLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
        );

        jTabbedPane1.setName(""); // NOI18N

        jPanel1.setLayout(new java.awt.GridLayout(3, 3, 4, 0));

        sbCycle.setSMax(300);
        sbCycle.setSMin(10);
        sbCycle.setTxt1(" Cycle");
        sbCycle.setTxt2(" sec");
        sbCycle.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbCyclePropertyChange(evt);
            }
        });
        jPanel1.add(sbCycle);

        sbOffset0.setSMax(300);
        sbOffset0.setTxt1("Offset NS");
        sbOffset0.setTxt2(" s");
        sbOffset0.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                sbOffset0ComponentResized(evt);
            }
        });
        sbOffset0.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbOffset0PropertyChange(evt);
            }
        });
        jPanel1.add(sbOffset0);

        sbGoC.setToolTipText("Proportion of green to the E-W direction");
        sbGoC.setTxt1("Green/C");
        sbGoC.setTxt2(" %");
        sbGoC.setValue(50);
        sbGoC.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbGoCPropertyChange(evt);
            }
        });
        jPanel1.add(sbGoC);

        sbOffset1.setSMax(300);
        sbOffset1.setTxt1("Offset EW");
        sbOffset1.setTxt2(" s");
        sbOffset1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbOffset1PropertyChange(evt);
            }
        });
        jPanel1.add(sbOffset1);

        sbCOV.setToolTipText("Cycle time Coefficient of variation");
        sbCOV.setTxt1("Ccov");
        sbCOV.setTxt2(" %");
        sbCOV.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbCOVPropertyChange(evt);
            }
        });
        jPanel1.add(sbCOV);

        checkbox1.setLabel("lock Offset EW-NS");
        checkbox1.setState(true);
        jPanel1.add(checkbox1);

        jTabbedPane1.addTab("signal timing", jPanel1);

        jPanel3.setLayout(new java.awt.GridLayout(3, 1));

        sbSimSpeed.setToolTipText("0 = Fastest");
        sbSimSpeed.setSMax(15);
        sbSimSpeed.setTxt1("SimSpeed");
        sbSimSpeed.setTxt2("");
        sbSimSpeed.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbSimSpeedPropertyChange(evt);
            }
        });
        jPanel3.add(sbSimSpeed);

        chkMovie.setText("Animation");
        chkMovie.setContentAreaFilled(false);
        chkMovie.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        chkMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMovieActionPerformed(evt);
            }
        });
        jPanel3.add(chkMovie);

        sbDtMFD.setToolTipText("Aggregation interval for calculating flow and density");
        sbDtMFD.setSMax(60);
        sbDtMFD.setSMin(1);
        sbDtMFD.setTxt1("dt for MFD");
        sbDtMFD.setTxt2(" min ");
        sbDtMFD.setValue(1);
        sbDtMFD.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbDtMFDPropertyChange(evt);
            }
        });
        jPanel3.add(sbDtMFD);

        tbPause.setText("Pause");
        tbPause.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tbPauseStateChanged(evt);
            }
        });
        jPanel3.add(tbPause);

        sbNumRuns.setToolTipText("0 = Fastest");
        sbNumRuns.setSMax(1000);
        sbNumRuns.setTxt1("Number of runs");
        sbNumRuns.setTxt2("");
        sbNumRuns.setValue(20);
        sbNumRuns.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbNumRunsPropertyChange(evt);
            }
        });
        jPanel3.add(sbNumRuns);

        jTabbedPane1.addTab("simulation", jPanel3);

        chkOut.setText("print data (may slow down sim)");

        txtOut.setColumns(20);
        txtOut.setRows(5);
        jScrollPane1.setViewportView(txtOut);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkOut)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(chkOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("output", jPanel8);

        BUSstopt.setTxt1("Dwell");
        BUSstopt.setTxt2(" sec");
        BUSstopt.setValue(10);
        BUSstopt.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbBusStopPropertyChange(evt);
            }
        });

        BUSprobst.setTxt1("ProbStop");
        BUSprobst.setTxt2("%");
        BUSprobst.setValue(50);
        BUSprobst.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sbBusProbStopPropertyChanger(evt);
            }
        });

        BUSspeed.setSMax(4);
        BUSspeed.setSMin(1);
        BUSspeed.setTxt1("TVSpeed");
        BUSspeed.setTxt2("");
        BUSspeed.setValue(2);
        BUSspeed.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                BUSspeedPropertyChanger(evt);
            }
        });

        BusProp.setTxt1("BusProp");
        BusProp.setTxt2("");
        BusProp.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                BusPropPropertyChanger(evt);
            }
        });

        javax.swing.GroupLayout BusesLayout = new javax.swing.GroupLayout(Buses);
        Buses.setLayout(BusesLayout);
        BusesLayout.setHorizontalGroup(
            BusesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BusesLayout.createSequentialGroup()
                .addGroup(BusesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BUSspeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BUSprobst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(BusesLayout.createSequentialGroup()
                .addGroup(BusesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BusesLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(BUSstopt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BusesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BusProp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        BusesLayout.setVerticalGroup(
            BusesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BusesLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(BUSstopt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BUSprobst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BUSspeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BusProp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("bus", Buses);

        caSimulation.setText("START SIMULATION");
        caSimulation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                caSimulationShortpath1CutsMousePress(evt);
            }
        });

        Restart.setText("RESTART MFD GRAPH");
        Restart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Restart(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(90, 90, 90))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(caSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Restart, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)))
                .addComponent(mov, javax.swing.GroupLayout.PREFERRED_SIZE, 1296, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(caSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Restart, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(164, 164, 164)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mov, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void caSimulationShortpath1CutsMousePress(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_caSimulationShortpath1CutsMousePress
        loadnet=true;
    }//GEN-LAST:event_caSimulationShortpath1CutsMousePress

    private void BUSspeedPropertyChanger(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_BUSspeedPropertyChanger
        int s = BUSspeed.getValue();
        Global.OMEGA[1] = s;
        Global.OMEGA[2] = s;
        Global.bus_spd = s;
    }//GEN-LAST:event_BUSspeedPropertyChanger

    private void sbBusProbStopPropertyChanger(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbBusProbStopPropertyChanger
        double c = (double)BUSprobst.getValue()/100;
        StreetSegment.pbusstop=c;
        Global.pstop=c;
    }//GEN-LAST:event_sbBusProbStopPropertyChanger

    private void sbBusStopPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbBusStopPropertyChange
        int c = BUSstopt.getValue();
        StreetSegment.busstoptime=c;
        Global.dwell=c;
        net.update_stopcnt(c);
    }//GEN-LAST:event_sbBusStopPropertyChange

    private void sbDtMFDPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbDtMFDPropertyChange
        mfddt = sbDtMFD.getValue()*60;
    }//GEN-LAST:event_sbDtMFDPropertyChange

    private void tbPauseStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tbPauseStateChanged
        String c = tbPause.getText();
        if(c=="Pause"){
            //stop();
            updateInterval= (int)Math.pow(sbSimSpeed.getSMax(),3);
            tbPause.setText("Play");
        }else{
            //start();
            updateInterval= (int)Math.pow(sbSimSpeed.getSMax()- sbSimSpeed.getValue(),3);
            tbPause.setText("Pause");
        }
    }//GEN-LAST:event_tbPauseStateChanged

    private void chkMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMovieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkMovieActionPerformed

    private void sbSimSpeedPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbSimSpeedPropertyChange
        updateInterval= (int)Math.pow(sbSimSpeed.getSMax()- sbSimSpeed.getValue(),3);
    }//GEN-LAST:event_sbSimSpeedPropertyChange

    private void sbCOVPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbCOVPropertyChange
        double c =(double)sbCOV.getValue()/100.0;//c cov
    }//GEN-LAST:event_sbCOVPropertyChange

    private void sbOffset1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbOffset1PropertyChange
        int c = sbOffset1.getValue();
        Node.Noffset1=c;
        Global.offset = c;
        net.setSignalTiming();
    }//GEN-LAST:event_sbOffset1PropertyChange

    private void sbGoCPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbGoCPropertyChange
        double c = (double)sbGoC.getValue()/100.0;
        Node.NgocEW=c;
        Global.green=Node.Ncycle*Node.NgocEW;
        net.setSignalTiming();
    }//GEN-LAST:event_sbGoCPropertyChange

    private void sbOffset0PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbOffset0PropertyChange
        int c = sbOffset0.getValue();
        Node.Noffset0=c;
        Global.offset=c;
        net.setSignalTiming();
        if(checkbox1.getState())sbOffset1.setValue(c);
    }//GEN-LAST:event_sbOffset0PropertyChange

    private void sbOffset0ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_sbOffset0ComponentResized

    }//GEN-LAST:event_sbOffset0ComponentResized

    private void sbCyclePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbCyclePropertyChange
        int c = sbCycle.getValue();
        Node.Ncycle=c;
        Global.cycle = c;
        Global.green = Node.Ncycle*Node.NgocEW;
        net.setSignalTiming();
        sbOffset0.setSMax(c);
        sbOffset1.setSMax(c);
    }//GEN-LAST:event_sbCyclePropertyChange

    private void BusPropPropertyChanger(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_BusPropPropertyChanger
        // TODO add your handling code here:
    }//GEN-LAST:event_BusPropPropertyChanger

    private void Restart(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Restart
        Global.diag.dispose();
        Global.diag =new DiagramPane(0);
    }//GEN-LAST:event_Restart

    private void sbNumRunsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sbNumRunsPropertyChange
        nruns = sbNumRuns.getValue();
    }//GEN-LAST:event_sbNumRunsPropertyChange

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ca.mySB BUSprobst;
    private ca.mySB BUSspeed;
    private ca.mySB BUSstopt;
    private ca.mySB BusProp;
    private javax.swing.JPanel Buses;
    private javax.swing.JButton Restart;
    private javax.swing.JButton caSimulation;
    private java.awt.Checkbox checkbox1;
    private javax.swing.JCheckBox chkMovie;
    private javax.swing.JCheckBox chkOut;
    private javax.swing.ButtonGroup inflowButtonGroup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private main.Movie mov;
    private ca.mySB mySB11;
    private javax.swing.ButtonGroup networkButtonGroup;
    private ca.mySB sbCOV;
    private ca.mySB sbCycle;
    private ca.mySB sbDtMFD;
    private ca.mySB sbGoC;
    private ca.mySB sbNumRuns;
    private ca.mySB sbOffset0;
    private ca.mySB sbOffset1;
    private ca.mySB sbSimSpeed;
    private javax.swing.JToggleButton tbPause;
    private javax.swing.JTextArea txtOut;
    // End of variables declaration//GEN-END:variables
    
    public void start() {
        System.out.println("starting...");
        if ( !running ) {
            running = true;
            thread = new Thread(this);
            thread.start();
	}
    }

    public void stop() {
        System.out.println("stopping...");
        thread.interrupt();
        running = false;
    }
  
    private void initi(){
        net = new Network(4,length,0,lanes);
        mov.setNet(net);
        mov.ini();
        
        double kj=1, Q = 1, L=(double)(blocks*length);

        sbCycle.setValue(60);
        sbCOV.setValue(0);
        sbGoC.setValue(50);
        sbOffset0.setValue(0);
        sbOffset1.setValue(0);
        sbSimSpeed.setValue(15);

        chkMovie.setSelected(false);
    }

    public void run(){
        if(firsttime){
            mov.ini();
            firsttime=false;
            setCtrls();
            t=0;
        }
              
        while ( running ) {
            try {
                Thread.sleep(1000);  //1000 milliseconds is one second.
            } catch(InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
            if (loadnet==true){
                for (int i=0;i<nruns;i++){ 
                   oneMfdRun(); //run simulation 
                }
                loadnet =false;
            }
        }
    }

    private void oneMfdRun(){
        createNewNetwork(); 
        net.resetTiming();
        net.setSignalTiming(); 
        double maxtravelprod = 0, maxden = 0;
        double TSarea = getTSarea(1)+ getTSarea(2) + getTSarea(3)+
                getTSarea(4);
        double ktot=0;

        net.measure();

        while(loadnet == true){//run 
            //update diagram
            net.update();
            net.resetcnts();

            //update simulation visualization
            if(chkMovie.isSelected()){
                for (int i = 1; i < Global.OMEGA[0]+1; i++) {
                    mov.pinta(i);
                }
            }

            //aggregate MFD results every "mfddt" seconds
            if(t%mfddt==0 && t!= 0){ 
                timecnt++;
                ktot = net.getDens()/TSarea;
                double travelprod = net.getTravelProd()*distunit/TSarea;

                //wait 4 periods for stabilization before results
                if (timecnt >= 4){               
                    
                    //update mfd diagram and print results
                    Color col = Color.black;
                    colind++;
                    Global.diag.mfd.paintupdate(ktot,travelprod,col);
                    if(chkOut.isSelected()){OutputTxt();}

                    //restart network variables
                    net.restartnet();
                    colind++;
                    reverseflows=false;
                    StreetSegment.inflow[0]= 0;
                    StreetSegment.inflow[1] = 0;
                    StreetSegment.exitRate = 1;
                    System.out.print("\nmax den "+maxden+"\n");
                    System.out.print("max travel prod "+maxtravelprod+"\n\n");
                    maxtravelprod = 0;
                    maxden = 0;
                    timecnt = 0;
                    net.resetqkv();
                    break;
                }
                net.resetqkv(); //reset mfd counters
            }
            //net.update_s();

            t++;
            if(chkMovie.isSelected()) {slow_down();}
        }
        net.resetHeadways();
        inflcount=0;
    }
    
    public void setCtrls() {
        mySB ctrl[] = {sbCycle,sbCOV,sbDtMFD,sbGoC,sbOffset0,sbOffset1,sbSimSpeed};
        String c = "time" + "\t" + "qEW" + "\t"+ "kEW" + "\t"+ "qNS" + "\t"+ "kNS" + "\t";
        for (int i = 0; i < ctrl.length; i++) c += ctrl[i].getTxt1()+"\t";
        txtOut.append(c + "\n");
    }

    public void OutputTxt() {
        mySB ctrl[] = {sbCycle,sbCOV,sbDtMFD,sbGoC,sbOffset0,sbOffset1,sbSimSpeed};
        DecimalFormat df = new DecimalFormat("#.#");
        String c = Global.TimeToString(t) + "\t" + df.format(qEW) + "\t"+ df.format(kEW) + "\t"+ df.format(qNS) + "\t"+ df.format(kNS) + "\t";
        for (int i = 0; i < ctrl.length; i++) c += ctrl[i].getValue()+"\t";
        txtOut.append(c + "\n");
    }

    private void slow_down() {
        try {Thread.sleep( updateInterval );
            } catch ( InterruptedException e ) {
            System.out.println("interrupted...");
            return;
        }
    }
    
    private void restartnet(){
        net.restartnet();
    }
    
    public int getTime(){
        return t;
    }
    
    public double getTSarea(int code){
        return net.getArea(code)*mfddt;
    }
    
    private void createNewNetwork(){
        net = new Network(blocks,length,0,lanes);
        mov.setNet(net);
        mov.ini();
        //t=0;
    }
    
}

